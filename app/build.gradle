apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def versionMajor = 0
def versionMinor = 1
def versionPatch = 0

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
def buildSuffix = "${versionMajor}-${versionMinor}-${versionPatch}"
def gitCommitCount = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

afterEvaluate {
    initFabricPropertiesIfNeeded()
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: System.env.FABRIC_SECRET)
        }
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
    }
}

apply plugin: 'io.fabric'
apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin-android-extensions'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "pl.ownvision.dogsociety"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode gitCommitCount
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        buildConfigField "String", "PARSE_APPLICATION_ID", "\"${System.env.PARSE_APPLICATION_ID}\""
        buildConfigField "String", "PARSE_CLIENT_KEY", "\"${System.env.PARSE_CLIENT_KEY}\""
    }

    signingConfigs {
        release {
            storeFile file("release.jks")
            storePassword System.getenv("DOG_SOCIETY_KEYSTORE_PASSWORD")
            keyAlias System.getenv("DOG_SOCIETY_KEY_ALIAS")
            keyPassword System.getenv("DOG_SOCIETY_KEY_PASSWORD")
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def alignedOutputFile = output.outputFile
            def unalignedOutputFile = output.packageApplication.outputFile

            // Customise APK filenames (to include build version)
            if (variant.buildType.zipAlignEnabled) {
                // normal APK
                output.outputFile = new File(alignedOutputFile.parent, alignedOutputFile.name.replace(".apk", "-" + buildSuffix + ".apk"))
            }
            // 'unaligned' APK
            output.packageApplication.outputFile = new File(unalignedOutputFile.parent, unalignedOutputFile.name.replace(".apk", "-" + buildSuffix + ".apk"))
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }

    testOptions {
        unitTests.all {
            jvmArgs '-XX:MaxPermSize=512m'
        }
    }
}


kapt {
    generateStubs = true
}

apply plugin: 'com.neenbedankt.android-apt'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.google.dagger:dagger:2.3'
    kapt 'com.google.dagger:dagger-compiler:2.3'
    // provided 'org.glassfish:javax.annotation:10.0-b28'

    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile 'com.pawegio.kandroid:kandroid:0.5.0@aar'

    // https://fabric.io/kits/android/crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    // https://github.com/BoltsFramework/Bolts-Android
    compile 'com.parse.bolts:bolts-android:1.4.0'
    // https://github.com/ParsePlatform/Parse-SDK-Android
    compile 'com.parse:parse-android:1.13.0'
    // https://github.com/PSDev/LicensesDialog
    compile 'de.psdev.licensesdialog:licensesdialog:1.8.0'
}
buildscript {
    // https://kotlinlang.org/docs/reference/using-gradle.html
    ext.kotlin_version = '1.0.1-2'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
    }
}
repositories {
    mavenCentral()
}